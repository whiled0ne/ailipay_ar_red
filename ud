/*********************************/
/* Author  - d00365899           */
/*          wapper for mpm to lua  */
/*********************************/

#include "securec.h"
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>
#include "mpm_framework.h"
#include "mpm.h"


MPM_STRUCTURE *mpms[32];
int	build_status[32];
MPM_STRUCTURE *mpm_tmp[32];
MPM_STRUCTURE *mpm_del;
int mpm_num=0;
int key_num[32]={0};
int maxDstr=10240;

struct mat
{
	int sum;
    int info[1024][2];
}re;

struct mat_info
{
	int sum;
	int lens[64];
    int info[1024][2];
}res;

void print_result(unsigned char *, uint32_t *, uint32_t);
int init_automata();
int create_automata();
int add_keyword(int mpm_index,const char *key,int keylen);
int build_automata(int mpm_index)  ;
struct mat match(int mpm_index,const char *buf ,int end) ;
void free_automata(int mpm_index)  ;
int url_decode(char *decodestr,const char *str,int len,int mode);

int init_automata()
{
	/*
	while(mpm_num>0)
	{
		//printf("Free: mpm_num: %d\n",mpm_num-1);
		MPM_FreeStructure(mpms[mpm_num-1]);
		id[mpm_num-1]=0;
		mpm_num--;
	}
	return 1;
	*/
	int k=0;
	for (k=0;k<32;k++)
	{
		if(key_num[k]>0)
		{
			MPM_FreeStructure(mpms[k]);
			key_num[k]=0;
		}
			
	}
}

int create_automata()
{
	/*
	int k=0;
	MPM_STRUCTURE *mpm;
	mpm=MPM_New();
	mpms[mpm_num]=mpm;
	build_status[mpm_num]=0;
	id[mpm_num]=1;

	return mpm_num++;
	*/
	int k=0;
	for (k=0;k<32;k++)
	{
		if(key_num[k]==0)
		{
			MPM_STRUCTURE *mpm;
			mpm=MPM_New();
			mpms[k]=mpm;
			build_status[k]=0;
			key_num[k]=1;
			return k;
		}
			
	}
	return -1;
}

int add_keyword(int mpm_index,const char *key,int keylen)
{
	if (build_status[mpm_index]==0)
	{
		MPM_AddPattern(mpms[mpm_index], (unsigned char*)key, keylen, 0,key_num[mpm_index]++);
	}
	else if (build_status[mpm_index]==2)
	{
		MPM_STRUCTURE *mpm;
		mpm=MPM_New();
		MPM_PATTERN *plist;
		int j;
		for(plist = mpms[mpm_index]->mpmPatterns; plist != NULL; plist = plist->next){
		for(j=0;j<plist->sids_size;j++)
		{
			MPM_AddPattern(mpm, plist->casepatrn, plist->n, 0,plist->sids[j]);
			
		}
		}
		MPM_AddPattern(mpm, (unsigned char*)key, keylen, 0,key_num[mpm_index]++);
		build_status[mpm_index]=1;
		mpm_tmp[mpm_index]=mpm;
		//printf("addkey mpm_index: %d\n",mpm_index);
	}
	else if(build_status[mpm_index]==1)
	{
		MPM_AddPattern(mpm_tmp[mpm_index], (unsigned char*)key, keylen, 0,key_num[mpm_index]++);
	}
	return 1;
}


int build_automata(int mpm_index)
{
	if (build_status[mpm_index]==0)
		MPM_Compile(mpms[mpm_index]);
	else
	{
		//printf("mpm index: %d\n",mpm_index);
		MPM_Compile(mpm_tmp[mpm_index]);
		mpm_del=mpms[mpm_index];
		mpms[mpm_index]=mpm_tmp[mpm_index];
		MPM_FreeStructure(mpm_del);
	}
	build_status[mpm_index]=2;
	return 1;
}

struct mat match(int mpm_index,const char *buf, int end)
{
	int mid_number=0;
	MPM_Search(mpms[mpm_index], (unsigned char*)buf,end,re.info,&mid_number, print_result);
	re.sum=mid_number;
	return re;
}

void free_automata(int mpm_index)
{
	MPM_FreeStructure(mpms[mpm_index]);
	build_status[mpm_index]=0;
	key_num[mpm_index]=0;
	return;
}

void print_result(unsigned char *pattern, uint32_t *id_list, uint32_t list_size)
{

}

bool isjsfunc(char c)
{
	if ( c=='[' ||  c==']' || c=='(' || c==')' || c=='!' || c=='+')
		return true;
	else
		return false;
}

bool ishex(char c)
{
	if( c>='0' && c<='9' || c>='a' && c<='f' || c>='A' && c<='F')
		return true;
	else
		return false;
}
void movestr(void * destination,int max, const void * source, size_t num)
{
	if (num>0)
	{
		memmove_s(destination,max,source,num);
		//memmove(destination,source,num);
	}
}

int url_decode(char * dStr,const char *str,int len,int mode) {
	
	//char *dStr = malloc(len + 1);
	char eStr[] = "000"; /* for a hex code */
	int i; /* the counter for the string */
	int j=0;
	int x=0;
	int plus=0;
	int delnum=0;
	int offset=0;
	int semicolon=0;
	if (mode==0)
	{
		memcpy_s(dStr,maxDstr, str,len+1);
	}
	else
	{
		offset=strlen(dStr);
		memcpy_s(dStr+offset,maxDstr,str,len+1);
	}
	
	for(i=offset;i<offset+len-delnum;++i) {
		//num++;
		if (dStr[i]==0 && i+1<offset+len-delnum){
			j=0;
			while(dStr[i+j+1]==0 && offset+len-delnum-i-j-1>0)
				j++;
			movestr(&dStr[i],len+1, &dStr[i+j+1], offset+len-delnum-i-j-1);
			delnum+=j;
			i-=1;
		}
		else if (dStr[i]==' ' || dStr[i]=='	'){
			j=0;
			while((dStr[i+j+1]==' ' ||dStr[i+j+1]=='	')&& offset+len-delnum-i-j-1>0)
				j++;
			if (j>0)
			{
				movestr(&dStr[i+1], len+1,&dStr[i+j+1], offset+len-delnum-i-j-1);
				delnum+=j;
				i-=1;
			}
		}
		/* c""at fl''ag */
		else if (dStr[i]=='"' && dStr[i-1]=='"' || dStr[i]=='\'' && dStr[i-1]=='\''){
			movestr(&dStr[i-1],len+1, &dStr[i+1],offset+len-delnum-i-1);
			delnum+=2;
			i-=1;
		}
		else if (dStr[i] >= 'A' && dStr[i]<='Z'){
			/* upper to lower */
			dStr[i]=dStr[i]+32;
		}
		else if(dStr[i] == '%') {

			if(isxdigit(dStr[i+1]) && isxdigit(dStr[i+2])) {
				/* like %2d */
				/* combine the next to numbers into one */
				eStr[0] = dStr[i+1];
				eStr[1] = dStr[i+2];
				eStr[2]	=	"0";
				/* convert it to decimal */
				x = strtol(eStr, NULL, 16);

				/* remove the hex */
				if (x>=32 && x<=126)
				{
					if( x >='A' && x<='Z' )
					x+=32;
					//printf("[%s] - ",dStr);
					
					if (semicolon==1 && dStr[i+3]==';')
					{
						plus=1;
						semicolon=0;
					}
					
					else if(dStr[i+3]=='%' && dStr[i+4]=='3' &&(dStr[i+5]=='B' || dStr[i+5]=='b'))
					{
						plus=3;
						//printf(";\n");
					}
					else
					{
						plus=0;
					}
					movestr(&dStr[i+1],len+1, &dStr[i+3+plus], offset+len-delnum-i-3-plus);
					delnum+=2+plus;
					dStr[i] = x;
					//printf("[%s]\n",dStr);
					if (x==37 || x=='\\' || x=='&')/* like %%25 */
					{
						i-=1;
					}
					else if (i>0 && dStr[i-1] == '%'||x =='#' && dStr[i-1]=='&')/* like %%325 */
					{
						i-=2;
					}
					else if (i>1 && dStr[i-2]== '%'|| x=='x' && dStr[i-1]=='#' && dStr[i-1]=='&')/* like %2%35 */
					{
						i-=3;
					}
				}
				else if (x==9||x==10||x==13)
				{
					i+=3;
				}
				else
				{
					//dStr[i] = '-';
					if (dStr[i+3]==';')
						plus=1;
					else
						plus=0;
					movestr(&dStr[i],len+1, &dStr[i+3+plus], offset+len-delnum-i-3-plus);
					delnum+=3+plus;
					i-=1;
				}

			}
			else if(dStr[i+1]=='u' || dStr[i+1]=='U'){
				/* like %u */
				j=0;
				while (dStr[i+j+2]=='0' && dStr[i+j+3]=='0' && offset+len-delnum-i-j-2>0 )
					j+=2;
				movestr(&dStr[i+1],len+1, &dStr[i+j+2], offset+len-delnum-i-j-2);
				delnum+=2+j;
				i-=1;				
			}
			else if(dStr[i+1]=='%'|| isxdigit(dStr[i+1]) && dStr[i+2]=='%'|| dStr[i-1]=='<'|| dStr[i+1]=='>'|| dStr[i+1]=='{')
			{}
			else
			{
				movestr(&dStr[i], len+1,&dStr[i+1], offset+len-delnum-i-1);
				delnum+=1;
				i-=1;
			}
		}
		else if(dStr[i]=='\\' && (dStr[i+1]=='u' || dStr[i+1]=='U' || dStr[i+1]=='x' || dStr[i+1]=='X')){
			/* like \u2d \x2d */
			j=0;
			while (dStr[i+j+2]=='0' && dStr[i+j+3]=='0')
			j+=2;
			dStr[i]='%';
			movestr(&dStr[i+1],len+1, &dStr[i+j+2], offset+len-delnum-i-j-2);
			delnum+=1+j;
			i-=1;
		}
		
		else if(dStr[i]=='\\' ){			
			if(isdigit(dStr[i+1]) && isdigit(dStr[i+2]) ){	
				j=0;
				while (dStr[i+j+1]=='0' && dStr[i+j+2]=='0' && offset+len-delnum-i-j-1-plus>0)
					j+=2;
				dStr[i]='%';

				/* like &#39 &#107*/
				eStr[0] = dStr[i+j+1];
				eStr[1] = dStr[i+j+2];
				eStr[2]="0";
				/* convert it to decimal */
				if(dStr[i+j+3]==';')
				{
					plus=1;
				}
				else if (isdigit(dStr[i+j+3]))
				{
					plus=1;
					eStr[2] = dStr[i+j+3];
					if(dStr[i+j+4]==';')
					{plus=2;}	
				}
				//printf("%s\n",dStr);
				x = strtol(eStr, NULL, 8);
				snprintf(eStr, 4,"%x",x);
				//printf("%d\n",x);
				dStr[i+j+1+plus] = eStr[0];
				dStr[i+j+2+plus] = eStr[1];
				//printf("%s\n",dStr);
				//memmove(&dStr[i+1], &dStr[i+j+1+plus], strlen(&dStr[i+j+1+plus])+1);
				movestr(&dStr[i+1],len+1, &dStr[i+j+1+plus],  offset+len-delnum-i-j-1-plus);
				delnum+=j;
				delnum+=plus;
				//printf("%s\n",dStr);
				i-=1;

			}
			else if(dStr[i+1]=='t' || dStr[i+1]=='n' || dStr[i+1]=='r')
			{
				movestr(&dStr[i],len+1, &dStr[i+2], offset+len-delnum-i-2);
				delnum+=2;
				i-=1;
			}
		}
		else if(dStr[i]=='&' && dStr[i+1]=='#'){			
			if (dStr[i+2]=='x' || dStr[i+2]=='X'){
				/* like &#x2d */
				j=0;
				while (dStr[i+j+3]=='0' && dStr[i+j+4]=='0' && offset+len-delnum-i-j-3>0)
					j+=2;
				dStr[i]='%';
				semicolon=1;
				movestr(&dStr[i+1],len+1, &dStr[i+j+3], offset+len-delnum-i-j-3);
				delnum+=2+j;
				i-=1;		
			}
			else if(isdigit(dStr[i+2]) && isdigit(dStr[i+3]) ){	
				j=0;
				while (dStr[i+j+2]=='0' && dStr[i+j+3]=='0' && offset+len-delnum-i-j-2-plus>0)
					j+=2;
				dStr[i]='%';

				/* like &#39 &#107*/
				eStr[0] = dStr[i+j+2];
				eStr[1] = dStr[i+j+3];
				eStr[2]="0";
				/* convert it to decimal */
				if(dStr[i+j+4]==';')
				{
					plus=1;
				}
				else if (isdigit(dStr[i+j+4]))
				{
					plus=1;
					eStr[2] = dStr[i+j+4];
					if(dStr[i+j+5]==';')
					{plus=2;}	
				}
				//printf("%s\n",dStr);
				x = strtol(eStr, NULL, 10);
				snprintf(eStr, 4,"%x",x);
				//printf("%d\n",x);
				dStr[i+j+2+plus] = eStr[0];
				dStr[i+j+3+plus] = eStr[1];
				//printf("%s\n",dStr);
				movestr(&dStr[i+1],len+1, &dStr[i+j+2+plus], offset+len-delnum-i-j-2-plus);
				delnum+=1+j;
				delnum+=plus;
				//printf("%s\n",dStr);
				i-=1;

			}
		}
		else if(dStr[i] == '&' )
		{
			if(dStr[i+1] == 'a' && dStr[i+2] == 'm' &&dStr[i+3]== 'p' &&dStr[i+4] == ';')
			{
				movestr(&dStr[i+1], len+1,&dStr[i+5], offset+len-delnum-i-5);
				delnum+=4;
				i-=1;
			}
			else if(dStr[i+1] == 'l' && dStr[i+2] == 't' &&dStr[i+3]== ';' )
			{
				dStr[i] = '<';
				movestr(&dStr[i+1],len+1, &dStr[i+4], offset+len-delnum-i-4);
				delnum+=3;
				i-=1;
			}
			else if(dStr[i+1] == 'g' && dStr[i+2] == 't' &&dStr[i+3]== ';' )
			{
				dStr[i] = '>';
				movestr(&dStr[i+1],len+1, &dStr[i+4], offset+len-delnum-i-4);
				delnum+=3;
				i-=1;
			}
			else if(dStr[i+1] == 'q' && dStr[i+2] == 'u' &&dStr[i+3]== 'o' &&dStr[i+4]== 't' &&dStr[i+5]== ';' )
			{
				dStr[i] = '"';
				movestr(&dStr[i+1],len+1, &dStr[i+6], offset+len-delnum-i-6);
				delnum+=5;
				i-=1;
			}
			else if(dStr[i+1] == 'a' && dStr[i+2] == 'p' &&dStr[i+3]== 'o' &&dStr[i+4]== 's' &&dStr[i+5]== ';' )
			{
				dStr[i] = '>';
				movestr(&dStr[i+1],len+1, &dStr[i+6], offset+len-delnum-i-6);
				delnum+=5;
				i-=1;
			}
			else if((dStr[i+1] == 'n' ||dStr[i+1] == 'N')&& dStr[i+2] == 'e' &&dStr[i+3]== 'w' &&(dStr[i+4] == 'L' ||dStr[i+4] == 'l') &&dStr[i+5]== 'i' &&dStr[i+6]== 'n' &&dStr[i+7]== 'e' &&dStr[i+8]== ';')
			{
				movestr(&dStr[i],len+1, &dStr[i+9], offset+len-delnum-i-9);
				delnum+=9;
				i-=1;
			}
			else if((dStr[i+1] == 't' ||dStr[i+1] == 'T') && dStr[i+2] == 'a' &&dStr[i+3]== 'b' &&dStr[i+4] == ';')
			{
				movestr(&dStr[i],len+1, &dStr[i+5],offset+len-delnum-i-5);
				delnum+=5;
				i-=1;
			}
		}
		else if(dStr[i] == '+' )
		{
			if (dStr[i-1]=='\'' && dStr[i+1]=='\'' || dStr[i-1]=='"' && dStr[i+1]=='"')
			{
				movestr(&dStr[i-1],len+1, &dStr[i+2],offset+len-delnum-i-3);
				delnum+=3;
				i-=2;				
			}
			else if (dStr[i-2]=='\'' && isspace(dStr[i-1]) && isspace(dStr[i+1])  && dStr[i+2]=='\'' || dStr[i-2]=='"' && isspace(dStr[i-1]) && isspace(dStr[i+1])  && dStr[i+2]=='"')
			{
				movestr(&dStr[i-2],len+1, &dStr[i+3],offset+len-delnum-i-5);
				delnum+=5;
				i-=3;				
			}
			else if (isjsfunc(dStr[i+1]) && isjsfunc(dStr[i+2]) && isjsfunc(dStr[i+3])||isjsfunc(dStr[i-1]) && isjsfunc(dStr[i-2]) && isjsfunc(dStr[i-3]))
			{
				
			}
			else
				dStr[i] = ' ';
		}
		else if(dStr[i] == '0' && (dStr[i+1] == 'x'||dStr[i+1] == 'X'))
		{
			j=1;
			while (ishex(dStr[i+j+1]) && ishex(dStr[i+j+2])&& offset+len-delnum-i-j-1>0)
			{
				eStr[0] = dStr[i+j+1];
				eStr[1] = dStr[i+j+2];
				eStr[2]	=	"0";
				/* convert it to decimal */
				dStr[i+j+1]=strtol(eStr, NULL, 16);
				movestr(&dStr[i+j+2],len+1, &dStr[i+j+3],offset+len-delnum-i-j-1);
				delnum+=1;
				j+=1;
			}
			movestr(&dStr[i],len+1, &dStr[i+2],offset+len-delnum-i-2);
		}
	}
	dStr[i]=0;
	//printf("delnum:%d\n",delnum);
	//printf("%d times char check\n",num);
	//return offset+len-delnum;
	//printf("len:%d %d\n",len-delnum,offset+len-delnum);
}
